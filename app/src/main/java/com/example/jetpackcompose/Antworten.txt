A) Welche Vorteile bieten Coroutinen in der Android-
Entwicklung und wie tragen sie dazu bei, asynchrone
Aufgaben effizienter und benutzerfreundlicher zu
gestalten?

- Coroutinen ermöglichen das Ausführen von asynchronen Operationen wie Netzwerkaufrufen oder Datenbankabfragen ohne
  direkten Umgang mit Threads
- Coroutinen blockieren keine Threads, sondern setzen sie effizient ein um Wartezeiten zu vermeiden
- Durch die Verwendung von suspend-Funktionen können asynchrone Operationen sequentiell geschrieben werden,
  was die Lesbar- und Wartbarkeit erhöht
- Mit Try-Catch-Blöcken in Coroutinen lassen sich Fehler asynchroner Aufgaben leicht abfangen


B) Erkläre warum du dich für einen bestimmten Dispatcher in Aufgabe 2A)
entschieden hast.

Es wurde Dispatchers.IO verwendet, da die Aufgabe einen Netzwerkaufruf umfasst. Dispatchers.IO ist speziell für IO-intensive
Aufgaben wie Netzwerkoperationen oder Datenbankabfragen optimiert. Er stellt sicher, dass diese Operationen auf seperaten
Threads ausgeführt werden, die speziell für solche Aufgaben vorgesehen ist, ohne den Main-Thread zu blockieren


C) Nenne zwei praxisrelevante Anwendungsfälle, bei denen der Einsatz von
Services sinnvoll ist. Erkläre kurz warum.

- Musik- oder Medienplayer: Ein Service wird verwendet, um das Abspielen von Musik oder Videos im Hintergrund fortzusetzen,
  auch wenn die App nicht mehr im Vordergrund ist. Dies sorgt für eine unterbrechungsfreie Benutzererfahrung
- Standortverfolgung: Ein Service wird verwendet, um im Hintergrund regelmäßig Standortdaten zu erfassen und an einen
  Server zu senden, beispielsweise in Navigations- oder Fitness-Apps. Dadurch bleibt die Funktionalität erhalten,
  auch wenn die App geschlossen ist


D) Welche Vorteile bietet die Kombination von Services und Coroutinen? Kannst du
ein Beispiel aus dem Code der Wetter-App nennen, in dem beide miteinander
kombiniert genutzt werden?

Vorteile:
- Coroutinen ermöglichen die effiziente und asynchrone Ausführung von Aufgaben innerhalb eines Services,
  ohne dass Threads manuell verwaltet werden müssen
- Netzwerkoperationen oder andere ressourcenintensive Aufgaben blockieren nicht den Haupt-Thread,
  was die Benutzeroberfläche reaktionsfähig hält

Beispiel aus der Wetter-App:
Im PopupService wird die Methode initializeTimerFromSettings() mit einer Coroutine im IO-Dispatcher ausgeführt.
Der Service sorgt dafür, dass Benachrichtigungen im Hintergrund gesendet werden können,
selbst wenn die App nicht aktiv genutzt wird. Die Coroutine im IO-Dispatcher liest asynchron die Timer-Einstellungen
aus dem DataStore, ohne den Main-Thread zu blockieren


